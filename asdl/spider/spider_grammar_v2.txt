# Assumptions:
# 1. sql is correct
# 2. only table name has alias
# 3. only one intersect/union/except

# val: value(float/string)/sql(dict)/col_unit(tuple)
# col_unit: (agg_id, col_id, isDistinct(bool))
# val_unit: (unit_op, col_unit1, col_unit2)
# table_unit: (table_type, tab_id/sql)
# cond_unit: (not_op(bool), cmp_op, val_unit, val1, val2)
# condition: [cond_unit1, 'and'/'or', cond_unit2, ...]
# sql {
#   'select': (isDistinct(bool), [(agg_id, val_unit), (agg_id, val_unit), ...])
#   'from': {'table_units': [table_unit1, table_unit2, ...], 'conds': condition}
#   'where': condition
#   'groupBy': [col_unit1, col_unit2, ...]
#   'orderBy': ('asc'/'desc', [val_unit1, val_unit2, ...])
#   'having': condition
#   'limit': None/integer
#   'intersect': None/sql
#   'except': None/sql
#   'union': None/sql
# }

# CLAUSE_KEYWORDS = ('select', 'from', 'where', 'group', 'order', 'limit', 'intersect', 'union', 'except')
# JOIN_KEYWORDS = ('join', 'on', 'as')
# CMP_OPS = ('not', 'between', '=', '>', '<', '>=', '<=', '!=', 'in', 'like', 'is', 'exists') 
# UNIT_OPS = ('none', '-', '+', "*", '/')
# AGG_OPS = ('none', 'max', 'min', 'count', 'sum', 'avg')
# TABLE_TYPE = ('sql', 'table_unit')
# COND_OPS = ('and', 'or')
# SQL_OPS = ('intersect', 'union', 'except')
# ORDER_OPS = ('desc', 'asc')

##########################################################################
# Some limitations
# 1. distinct flag is not considered
# 2. at most one INTERSECT/UNION/Except
# 3. does not handle the JOIN of two same tables in FROM clause
# 4. for groupby items, we use col_id, while col_unit for other clauses

tab_id, col_id, val_id

sql = Intersect(sql_unit left_sql_unit, sql_unit right_sql_unit)
        | Union(sql_unit left_sql_unit, sql_unit right_sql_unit)
        | Except(sql_unit left_sql_unit, sql_unit right_sql_unit)
        | Single(sql_unit sql_unit)

sql_unit = FromSelectWhereGroupByOrderBy(from from, select select, condition where, groupby groupby, orderby orderby)
        | FromSelectGroupByOrderBy(from from, select select, groupby groupby, orderby orderby)
        | FromSelectWhereOrderBy(from from, select select, condition where, orderby orderby)
        | FromSelectWhereGroupBy(from from, select select, condition where, groupby groupby)
        | FromSelectWhere(from from, select select, condition where)
        | FromSelectGroupBy(from from, select select, groupby groupby)
        | FromSelectOrderBy(from from, select select, orderby orderby)
        | FromSelect(from from, select select)

# enumerable productions:
# [type name:low,high] means the least number of fields is low, while the most is high
# [type name:,high]: low is default to 1
# [type name:low,]: high is default to pre-defined threshold, e.g. 10
select = SelectColumn[col_unit col_unit:1,6](col_unit col_unit)

from = FromTableOne(tab_id tab_id)
        | FromTable[tab_id tab_id:2,7](tab_id tab_id, from_condition from)
        | FromSQL(sql from_sql)

from_condition = JoinCondition[join join:1,6](join join)

join = ColumnJoin(col_id col_id, col_id col_id)

groupby = GroupByColumn[col_id groupby_col_id:1,3](col_id groupby_col_id)
        | GroupByHavingColumn[col_id groupby_col_id:1,3](col_id groupby_col_id, condition having)

orderby = OrderByColumn[col_unit col_unit:1,3](col_unit col_unit, order order)
        | OrderByLimitColumn[col_unit col_unit:1,3](col_unit col_unit, order order, val_id limit)

order = Asc | Desc

condition = AndCondition[condition condition:2,4](condition condition)
        | OrCondition[condition condition:2,3](condition condition)
        | BetweenCondition(col_unit col_unit, value left_value, value right_value)
        | CmpCondition(cmp_op cmp_op, col_unit col_unit, value value)

cmp_op = Equal | NotEqual | GreaterThan | GreaterEqual | LessThan | LessEqual | Like | NotLike | In | NotIn

value = SQLValue(sql value_sql) | LiteralValue(val_id val_id) | ColumnValue(col_id col_id)

col_unit = UnaryColumnUnit(agg_op agg_op, col_id col_id)
        | BinaryColumnUnit(agg_op agg_op, unit_op unit_op, col_id left_col_id, col_id right_col_id)

agg_op = None | Max | Min | Count | Sum | Avg

unit_op = Minus | Plus | Times | Divide